# IMPORTANT NOTE ABOUT YAML CONFIGURATION FILES
# ---> Be sure to use spaces instead of tabs for indentation. YAML is 
#      white-space sensitive!

##### SERVER SETUP ################################################################

# By default the login page will be available at the root path 
# (e.g. https://login.example.net/). The uri_path option lets you serve it from a 
# different path (e.g. https://login.example.net/cas).

#uri_path: /cas
server: webrick
port: 80

##### DATABASE #################################################################

# Set up the database connection. Make sure that this database is secure!
# 
# With MySQL, your config would be something like the following:
# (be sure to create the casserver database in MySQL beforehand,
#   i.e. `mysqladmin -u root create casserver`)

database:
  pool: 10
  adapter: mysql2
  database: PLACEHOLDER_MYSQL_DATABASE
  username: PLACEHOLDER_MYSQL_USERNAME
  password: PLACEHOLDER_MYSQL_PASSWORD
  host: PLACEHOLDER_MYSQL_HOST

#database:
#  adapter: sqlite3
#  database: /var/lib/casserver.db
 

# By default RubyCAS-Server will run migrations at every startup to ensure
# that its database schema is up-to-date. To disable this behaviour set
# the following option to true:

#disable_auto_migrations: true

##### AUTHENTICATION ###########################################################

authenticator:
  class: CASServer::Authenticators::LDAP
  extra_attributes: PLACEHOLDER_CAS_EXTRA_ATTRIBUTES
  ldap:
    host: PLACEHOLDER_LDAP_HOST
    port: PLACEHOLDER_LDAP_PORT
    base: PLACEHOLDER_LDAP_BASEDN
    filter: PLACEHOLDER_LDAP_FILTER
    username_attribute: PLACEHOLDER_LDAP_UID
    auth_user: PLACEHOLDER_LDAP_BINDDN
    auth_password: PLACEHOLDER_LDAP_PASSWORD

##### LOOK & FEEL ##############################################################

# Set the path to the theme directory that determines how your CAS pages look. 
#
# Custom themes are not well supported yet, but will be in the near future. In 
# the meantime, if you want to create a custom theme, you can create a 
# subdirectory under the CASServer's themes dir (for example, 
# '/usr/lib/ruby/1.8/gems/casserver-xxx/public/themes', if you installed CASServer 
# on Linux as a gem). A theme is basically just a theme.css file that overrides 
# the themes/cas.css styles along with a collection of image files
# like logo.png and bg.png.
#
# By default, we use the 'simple' theme which you can find in themes/simple.
theme: pps

# The name of your company/organization. This will show up on the login page.
organization: Piratenpartei | Partipirate Partitopirata | Pirateparty

# A short bit of text that shows up on the login page. You can make this blank 
# if you prefer to have no extra text shown at the bottom of the login box.
infoline: <a href="http://piratenpartei.ch">Piratenpartei | Partipirate <br> Partitopirata | Pirateparty</a><br><br><a href="https://my.piratenpartei.ch/authentication/pwreset">Forgot your password?</>

# Custom views directory. If set, this will be used instead of 'lib/casserver/views'.
#custom_views: /path/to/custom/views

# Custom public directory. If set, static content (css, etc.) will be served from here rather 
# than from rubycas-server's internal 'public' directory (but be mindful of any overriding 
# settings you may have in your web server's config).
#public_dir: /path/to/custom/public

##### LOCALIZATION (L10N) #######################################################
# The server will attempt to detect the user's locale and show text in the 
# appropriate language based on:
#
#   1. The 'lang' URL parameter (if any)
#   2. The 'lang' cookie (if any)
#   3. The HTTP_ACCEPT_LANGUAGE header supplied by the user's browser.
#   4. The HTTP_USER_AGENT header supplied by the user's browser.
#
# If the locale cannot be established based on one of the above checks (in the 
# shown order), then the below 'default_locale' option will be used.
#
# The format is the same as standard linux locales (langagecode_COUNTRYCODE): 
#
#   ru_RU - Russian, Russia
#   eo_AQ - Esperanto, Antarctica 
#   
# It will also work if you leave out the region (i.e. just "ru" for Russian,
# "eo" for Esperanto).
#
# If you are interested in contributing new translations or have corrections
# to the existing translations, see 
# http://code.google.com/p/rubycas-server/wiki/HowToContribueTranslations
#
# default_locale: de

##### LOGGING ##################################################################

# Configure general logging. This log is where you'll want to look in case of 
# problems.
#
# You may want to change the file to something like /var/log/casserver.log
# Set the level to DEBUG if you want more detailed logging.

log:
  file: /var/log/casserver.log
  level: DEBUG


# If you want full database logging, uncomment this next section.
# Every SQL query will be logged here. This is useful for debugging database 
# problems.

#db_log:
#  file: /var/log/casserver_db.log


# Setting the following option to true will disable CLI output to stdout.
# i.e. this will get rid of messages like ">>> Redirecting RubyCAS-Server log..."
# This is useful when, for example, you're running rspecs.

#quiet: true


##### SINGLE SIGN-OUT ##########################################################

# When a user logs in to a CAS-enabled client application, that application
# generally opens its own local user session. When the user then logs out
# through the CAS server, each of the CAS-enabled client applications need
# to be notified so that they can close their own local sessions for that user.
#
# Up until recently this was not possible within CAS. However, a method for
# performing this notification was recently added to the protocol (in CAS 3.1). 
# This works exactly as described above -- when the user logs out, the CAS 
# server individually contacts each client service and notifies it of the 
# logout. Currently not all client applications support this, so this
# behaviour is disabled by default. To enable it, uncomment the following
# configuration line. Note that currently it is not possible to enable
# or disable single-sign-out on a per-service basis, but this functionality
# is planned for a future release.

enable_single_sign_out: true


##### OTHER ####################################################################

# You can set various ticket expiry times (specify the value in seconds).

# Unused login and service tickets become unusable this many seconds after
# they are created. (Defaults to 5 minutes)

#maximum_unused_login_ticket_lifetime: 300
#maximum_unused_service_ticket_lifetime: 300

# The server must periodically delete old tickets (login tickets, service tickets
# proxy-granting tickets, and ticket-granting tickets) to prevent buildup of
# stale data. This effectively limits the maximum length of a CAS session to
# the lifetime given here (in seconds). (Defaults to 48 hours)
# 
# Note that this limit is not enforced on the client side; it refers only to the
# the maximum lifetime of tickets on the CAS server.

maximum_session_lifetime: 2592000


# If you want the usernames entered on the login page to be automatically 
# downcased (converted to lowercase), enable the following option. When this 
# option is set to true, if the user enters "JSmith" as their username, the 
# system will automatically
# convert this to "jsmith".

downcase_username: true
